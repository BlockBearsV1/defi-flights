import { BaseApiParams } from "@account-abstraction/sdk/dist/src/BaseAccountAPI";
import { ChainOrRpcUrl, SmartContract, ThirdwebSDK } from "@thirdweb-dev/sdk";
import { Signer, BigNumberish, BigNumber, ContractInterface } from "ethers";
import { BaseAccountAPI } from "./base-api";
export interface AccountApiParams extends Omit<BaseApiParams, "provider"> {
    chain: ChainOrRpcUrl;
    localSigner: Signer;
    accountId: string;
    factoryAddress: string;
    factoryAbi?: ContractInterface;
    accountAbi?: ContractInterface;
}
export declare class AccountAPI extends BaseAccountAPI {
    sdk: ThirdwebSDK;
    params: AccountApiParams;
    accountContract?: SmartContract;
    factoryContract?: SmartContract;
    constructor(params: AccountApiParams);
    getChainId(): Promise<number>;
    _getAccountContract(): Promise<SmartContract>;
    getAccountInitCode(): Promise<string>;
    getFactoryContract(): Promise<SmartContract<import("ethers").BaseContract>>;
    getCounterFactualAddress(): Promise<string>;
    getNonce(): Promise<BigNumber>;
    encodeExecute(target: string, value: BigNumberish, data: string): Promise<string>;
    signUserOpHash(userOpHash: string): Promise<string>;
}
//# sourceMappingURL=account.d.ts.map