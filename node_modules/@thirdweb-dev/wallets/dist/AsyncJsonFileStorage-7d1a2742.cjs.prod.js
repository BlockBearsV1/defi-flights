'use strict';

var defineProperty = require('./defineProperty-6ca2d9a5.cjs.prod.js');
var fsModule = require('fs');
var path = require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var fsModule__default = /*#__PURE__*/_interopDefault(fsModule);
var path__default = /*#__PURE__*/_interopDefault(path);

const fs = fsModule__default["default"].promises;
class AsyncJsonFileStorage {
  constructor(filePath) {
    defineProperty._defineProperty(this, "filePath", void 0);
    this.filePath = path__default["default"].resolve(filePath);
  }
  async getItem(key) {
    const content = await fs.readFile(this.filePath, {
      encoding: "utf-8"
    });
    if (!content) {
      return null;
    }
    const data = JSON.parse(content);
    return data[key];
  }
  async setItem(key, value) {
    // if the file doesn't exist, create it

    try {
      const content = await fs.readFile(this.filePath, {
        encoding: "utf-8"
      });
      const data = content ? JSON.parse(content) : {};
      data[key] = value;
      await fs.writeFile(this.filePath, JSON.stringify(data));
    } catch {
      await fs.writeFile(this.filePath, JSON.stringify({
        [key]: value
      }));
    }
  }
  async removeItem(key) {
    const content = await fs.readFile(this.filePath, {
      encoding: "utf-8"
    });
    const data = JSON.parse(content);
    delete data[key];
    await fs.writeFile(this.filePath, JSON.stringify(data));
  }
}

exports.AsyncJsonFileStorage = AsyncJsonFileStorage;
