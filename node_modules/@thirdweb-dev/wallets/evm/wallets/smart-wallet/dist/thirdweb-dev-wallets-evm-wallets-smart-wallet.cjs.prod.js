'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../../../dist/defineProperty-6ca2d9a5.cjs.prod.js');
var evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase = require('../../../../dist/base-3accd3fa.cjs.prod.js');
var sdk = require('@thirdweb-dev/sdk');
require('../../../../dist/classPrivateMethodGet-cf746c9e.cjs.prod.js');
require('../../../../dist/classPrivateFieldSet-4a4973f9.cjs.prod.js');
require('../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.prod.js');
require('ethers');
require('eventemitter3');
require('@thirdweb-dev/chains');

async function getAssociatedAccounts(personalWallet, factoryAddress, chain) {
  const personalSigner = await personalWallet.getSigner();
  const readOnlySDK = new sdk.ThirdwebSDK(chain);
  const factoryContract = await readOnlySDK.getContract(factoryAddress);
  // TODO this might not scale for very large factories
  // TODO need to also merge the accounts that have this personalWallet as a secondary signer
  const accounts = await factoryContract.events.getEvents("AccountCreated", {
    filters: {
      accountAdmin: await personalSigner.getAddress()
    }
  });
  return accounts.map(a => a.data);
}
async function isAccountIdAvailable(accountId, factoryAddress, chain) {
  const readOnlySDK = new sdk.ThirdwebSDK(chain);
  const factoryContract = await readOnlySDK.getContract(factoryAddress);
  const accountAddress = await factoryContract.call("getAddress", [accountId]);
  const isDeployed = await sdk.isContractDeployed(accountAddress, readOnlySDK.getProvider());
  return !isDeployed;
}

class SmartWallet extends evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.AbstractClientWallet {
  get walletName() {
    return "Smart Wallet";
  }
  constructor(options) {
    super(SmartWallet.id, {
      ...options
    });
    defineProperty._defineProperty(this, "connector", void 0);
  }
  async getConnector() {
    if (!this.connector) {
      const {
        SmartWalletConnector
      } = await Promise.resolve().then(function () { return require('../../../connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.prod.js'); });
      this.connector = new SmartWalletConnector(this.options);
    }
    return this.connector;
  }
  getPersonalWallet() {
    return this.connector?.personalWallet;
  }
  autoConnect(params) {
    return this.connect(params);
  }
}
defineProperty._defineProperty(SmartWallet, "meta", {
  name: "SmartWallet",
  iconURL: "ipfs://QmPSPvHvYWh9BfvLLPDHjVoCuJTd2hSMSgF3N6JCrjuX4v/SmartWallet.svg"
});
defineProperty._defineProperty(SmartWallet, "id", "SmartWallet");

exports.SmartWallet = SmartWallet;
exports.getAssociatedAccounts = getAssociatedAccounts;
exports.isAccountIdAvailable = isAccountIdAvailable;
