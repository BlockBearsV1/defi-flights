import { _ as _defineProperty } from '../../../../dist/defineProperty-e24c82ea.esm.js';
import { a as AbstractClientWallet } from '../../../../dist/base-0142d377.esm.js';
import { ThirdwebSDK, isContractDeployed } from '@thirdweb-dev/sdk';
import '../../../../dist/classPrivateMethodGet-71fe23d8.esm.js';
import '../../../../dist/classPrivateFieldSet-e25e1cec.esm.js';
import '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js';
import 'ethers';
import 'eventemitter3';
import '@thirdweb-dev/chains';

async function getAssociatedAccounts(personalWallet, factoryAddress, chain) {
  const personalSigner = await personalWallet.getSigner();
  const readOnlySDK = new ThirdwebSDK(chain);
  const factoryContract = await readOnlySDK.getContract(factoryAddress);
  // TODO this might not scale for very large factories
  // TODO need to also merge the accounts that have this personalWallet as a secondary signer
  const accounts = await factoryContract.events.getEvents("AccountCreated", {
    filters: {
      accountAdmin: await personalSigner.getAddress()
    }
  });
  return accounts.map(a => a.data);
}
async function isAccountIdAvailable(accountId, factoryAddress, chain) {
  const readOnlySDK = new ThirdwebSDK(chain);
  const factoryContract = await readOnlySDK.getContract(factoryAddress);
  const accountAddress = await factoryContract.call("getAddress", [accountId]);
  const isDeployed = await isContractDeployed(accountAddress, readOnlySDK.getProvider());
  return !isDeployed;
}

class SmartWallet extends AbstractClientWallet {
  get walletName() {
    return "Smart Wallet";
  }
  constructor(options) {
    super(SmartWallet.id, {
      ...options
    });
    _defineProperty(this, "connector", void 0);
  }
  async getConnector() {
    if (!this.connector) {
      const {
        SmartWalletConnector
      } = await import('../../../connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js');
      this.connector = new SmartWalletConnector(this.options);
    }
    return this.connector;
  }
  getPersonalWallet() {
    return this.connector?.personalWallet;
  }
  autoConnect(params) {
    return this.connect(params);
  }
}
_defineProperty(SmartWallet, "meta", {
  name: "SmartWallet",
  iconURL: "ipfs://QmPSPvHvYWh9BfvLLPDHjVoCuJTd2hSMSgF3N6JCrjuX4v/SmartWallet.svg"
});
_defineProperty(SmartWallet, "id", "SmartWallet");

export { SmartWallet, getAssociatedAccounts, isAccountIdAvailable };
